# -*- coding: utf-8 -*-
"""ShAI_BootCamp_Assignment Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zz-76faiz_sksCC1d86OxOVgCXyFPOJy

# About Dataset
salaries dataset generally provides information about the employees of an organization in relation to their compensation. It typically includes details such as how much each employee is paid (their salary), their job titles, the departments they work in, and possibly additional information like their level of experience, education, and employment history within the organization.

# Features
- 'Id'
- 'EmployeeName'
- 'JobTitle'
- 'BasePay'
- 'OvertimePay'
- 'OtherPay'
- 'Benefits'
- 'TotalPay' -> salary
- 'TotalPayBenefits'
- 'Year'
- 'Notes'
- 'Agency'
- 'Status'

# Tasks

1. **Basic Data Exploration**: Identify the number of rows and columns in the dataset, determine the data types of each column, and check for missing values in each column.

2. **Descriptive Statistics**: Calculate basic statistics mean, median, mode, minimum, and maximum salary, determine the range of salaries, and find the standard deviation.

3. **Data Cleaning**: Handle missing data by suitable method with explain why you use it.

4. **Basic Data Visualization**: Create histograms or bar charts to visualize the distribution of salaries, and use pie charts to represent the proportion of employees in different departments.

5. **Grouped Analysis**: Group the data by one or more columns and calculate summary statistics for each group, and compare the average salaries across different groups.

6. **Simple Correlation Analysis**: Identify any correlation between salary and another numerical column, and plot a scatter plot to visualize the relationship.

8. **Summary of Insights**: Write a brief report summarizing the findings and insights from the analyses.

# Very Important Note
There is no fixed or singular solution for this assignment, so if anything is not clear, please do what you understand and provide an explanation.
"""

import pandas as pd
import numpy as np

# Load your dataset
df = pd.read_csv('/content/Salaries.csv')
df.head()

df.columns

"""## Basic Data Exploratio

"""

df.shape

# Number of rows and columns
num_rows, num_columns = df.shape
print("Number of rows: ", num_rows)
print("Number of columns: ", num_columns)

# Data types of each column
data_types = df.dtypes
print("\nData types of each column:")
print(data_types)

# Check for missing values in each column
missing_values = df.isnull().sum()
print("\nMissing values in each column:")
print(missing_values)

"""## Descriptive Statistics"""

# Basic statistics
basic_stats = df[['BasePay', 'OvertimePay', 'OtherPay', 'Benefits', 'TotalPay', 'TotalPayBenefits']].astype(float).describe()

print("Basic Statistics:\n", basic_stats)

# Mode for each column
modes = df[['BasePay', 'OvertimePay', 'OtherPay', 'Benefits', 'TotalPay', 'TotalPayBenefits']].mode()

print("Mode:\n", modes)

# Calculate range of salaries
salary_range = df[['TotalPayBenefits']].max() - df[['TotalPayBenefits']].min()

print("Range of Salaries:\n", salary_range)

# Standard deviation for each column
std_deviation = df[['BasePay', 'OvertimePay', 'OtherPay', 'Benefits', 'TotalPay', 'TotalPayBenefits']].astype(float).std()

# Print the standard deviation
print("\nStandard Deviation:\n", std_deviation)

"""## Data Cleaning"""

# I will delete the Status and Notes columns because they are completely empty
df.drop(['Notes', 'Status'], axis=1, inplace=True)

# Drop the missing values for the BasePay column due to the small number of missing values in it
df_cleaned = df.dropna(subset=['BasePay'])

# Replace missing values in Benefits, BasePay, OvertimePay and OtherPay columns because there are relatively few missing values relative to the size of the dataset. I replaced it with mean.
df['Benefits'].fillna(df['Benefits'].mean(), inplace=True)
df['BasePay'].fillna(df['BasePay'].mean(), inplace=True)
df['OvertimePay'].fillna(df['OvertimePay'].mean(), inplace=True)
df['OtherPay'].fillna(df['OtherPay'].mean(), inplace=True)

# Check for missing values in each column after drop Status and Notes columns
missing_values_after_cleaning = df.isnull().sum()
print("\nMissing values in each column:")
print(missing_values_after_cleaning)

# number of rows
print("Number of rows:", len(df))

# Assuming 'BasePay', 'OvertimePay', 'OtherPay', 'Benefits' are the salary-related columns
salary_columns = ['BasePay', 'OvertimePay', 'OtherPay', 'Benefits']

# Identify rows with negative values in salary-related columns
rows_with_negative_values = df[(df[salary_columns] < 0).any(axis=1)]

# Get the count of rows with negative values
num_rows_with_negative_values = len(rows_with_negative_values)

# Print the result
print("Number of rows with negative values:", num_rows_with_negative_values)

# Assuming 'BasePay', 'OvertimePay', 'OtherPay', 'Benefits' are the salary-related columns
salary_columns = ['BasePay', 'OvertimePay', 'OtherPay', 'Benefits']

# Identify rows with negative values in salary-related columns
rows_with_negative_values = df[(df[salary_columns] < 0).any(axis=1)]

# Drop rows with negative values
df = df.drop(rows_with_negative_values.index)

# Confirm the removal by printing the updated number of rows
print("Number of rows after removing negative values:", len(df))

# Basic statistics
basic_stats = df[['BasePay', 'OvertimePay', 'OtherPay', 'Benefits', 'TotalPay', 'TotalPayBenefits']].astype(float).describe()

print("Basic Statistics:\n", basic_stats)

df.columns

"""## Basic Data Visualization"""

import matplotlib.pyplot as plt
import seaborn as sns

# Set the style for seaborn
sns.set(style="whitegrid")

# Create a histogram for the 'TotalPayBenefits' column
plt.figure(figsize=(10, 6))
sns.histplot(df['TotalPayBenefits'], bins=30, kde=True, color='blue')
plt.title('Distribution of Total Pay and Benefits')
plt.xlabel('Total Pay and Benefits')
plt.ylabel('Frequency')
plt.show()

# Create a pie chart for the proportion of employees in different departments ('JobTitle')
plt.figure(figsize=(10, 8))
job_title_counts = df['JobTitle'].value_counts().head(10)  # Adjust the number of top job titles as needed
plt.pie(job_title_counts, labels=job_title_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Proportion of Employees in Different Departments')
plt.show()

"""## Grouped Analysis"""

# Group the data by 'JobTitle' and calculate the average salary for each group
grouped_data = df.groupby('JobTitle')['TotalPayBenefits'].mean().reset_index()

# Sort the data by average salary in descending order for better visualization
grouped_data = grouped_data.sort_values(by='TotalPayBenefits', ascending=False)

print(grouped_data)

plt.figure(figsize=(14, 8))

sns.barplot(x='TotalPayBenefits', y='JobTitle', data=grouped_data.head(10), palette='viridis')

plt.title('Average Total Pay and Benefits by Top 10 Job Titles')
plt.xlabel('Average Total Pay and Benefits')
plt.ylabel('Job Title')

plt.show()

"""## Simple Correlation Analysis"""

# Calculate the correlation between 'TotalPayBenefits' and another numerical column (e.g., 'BasePay')
correlation = df['TotalPayBenefits'].corr(df['BasePay'])

# Print the correlation coefficient
print(f"Correlation between Total Pay and Benefits and Base Pay: {correlation:.2f}")

plt.figure(figsize=(10, 6))

sns.scatterplot(x='BasePay', y='TotalPayBenefits', data=df, color='blue', alpha=0.5)
plt.title('Scatter Plot: Total Pay and Benefits vs. Base Pay')
plt.xlabel('Base Pay')
plt.ylabel('Total Pay and Benefits')

plt.show()

# Calculate the correlation matrix for all numerical columns
correlation_matrix = df.corr()

# Print the correlation coefficients with 'TotalPayBenefits'
print("Correlation with Total Pay and Benefits:")
print(correlation_matrix['TotalPayBenefits'].sort_values(ascending=False))

# Get the number of numerical columns
num_numerical_columns = len(df.select_dtypes(include='number').columns)

# Determine the subplot grid layout
num_rows = (num_numerical_columns - 1) // 3 + 1
num_cols = min(3, num_numerical_columns)

# Create scatter plots for the relationships with 'TotalPayBenefits'
plt.figure(figsize=(15, 5 * num_rows))
for i, column in enumerate(df.select_dtypes(include='number').columns):
    if column != 'TotalPayBenefits':
        plt.subplot(num_rows, num_cols, i + 1)
        sns.scatterplot(x=column, y='TotalPayBenefits', data=df, color='blue', alpha=0.5)
        plt.title(f'Scatter Plot: Total Pay and Benefits vs. {column}')
        plt.xlabel(column)
        plt.ylabel('Total Pay and Benefits')

plt.tight_layout()
plt.show()